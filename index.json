[{"categories":["documentation"],"content":"探索 Hugo - FixIt 主题的全部内容和背后的核心概念。","date":"2021-12-19","objectID":"/first_post/","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"探索 Hugo - FixIt 主题的全部内容和背后的核心概念。 ","date":"2021-12-19","objectID":"/first_post/:0:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"1 准备 由于 Hugo 提供的便利性，Hugo 本身是这个主题唯一的依赖。 直接安装满足你操作系统 (Windows, Linux, macOS) 的最新版本  Hugo (\u003e 0.84.0). 为什么不支持早期版本的 Hugo? 由于 getJSON 支持添加 HTTP header 在 配置改造 中被引入，本主题只支持高于 0.84.0 的 Hugo 版本。 推荐使用 Hugo extended 版本 由于这个主题的一些特性需要将  SCSS 转换为  CSS, 推荐使用 Hugo extended 版本来获得更好的使用体验。 ","date":"2021-12-19","objectID":"/first_post/:1:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"2 安装 以下步骤可帮助你初始化新网站。如果你根本不了解 Hugo, 我们强烈建议你按照此 快速入门文档 进一步了解它。 ","date":"2021-12-19","objectID":"/first_post/:2:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"2.1 创建你的项目 Hugo 提供了一个 new 命令来创建一个新的网站： hugo new site my_website cd my_website ","date":"2021-12-19","objectID":"/first_post/:2:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"2.2 安装主题 FixIt 主题的仓库是：https://github.com/hugo-fixit/FixIt 你可以下载主题的 最新版本  .zip 文件 并且解压放到 themes 目录。 另外，也可以直接把这个主题克隆到 themes 目录： git clone https://github.com/hugo-fixit/FixIt.git themes/FixIt 或者，初始化你的项目目录为 git 仓库，并且把主题仓库作为你的网站目录的子模块： git init git submodule add https://github.com/hugo-fixit/FixIt.git themes/FixIt 如果你想获得较快的更新，可设置主题分支为 dev。 git submodule set-branch -b dev themes/FixIt ","date":"2021-12-19","objectID":"/first_post/:2:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"2.3 基础配置 以下是 FixIt 主题的基本配置： title = \"我的全新 Hugo FixIt 网站\" baseURL = \"http://example.org/\" # 设置默认的语言 [\"en\", \"zh-cn\", \"fr\", \"pl\", ...] defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN 大写 [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"FixIt\" [params] # FixIt 主题版本 version = \"0.2.X\" [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称（允许 HTML 格式）之前添加其他信息，例如图标 pre = \"\" # 你可以在名称（允许 HTML 格式）之后添加其他信息，例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时，将显示的标题 title = \"\" weight = 1 # 向菜单项添加用户定义的内容 [menu.main.params] # 添加 CSS 类到菜单项 class = \"\" # 是否为草稿菜单，类似草稿页面 draft = false # 添加 fontawesome 图标到菜单项 icon = \"fa-solid fa-archive\" # 设置菜单项类型，可选值：[\"mobile\", \"desktop\"] type = \"\" [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 2 [menu.main.params] icon = \"fa-solid fa-th\" [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 3 [menu.main.params] icon = \"fa-solid fa-tags\" # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/hugo-fixit/FixIt/issues/43) noClasses = false 注意 在构建网站时，你可以使用 --theme 选项设置主题。但是，我建议你修改配置文件 (config.toml) 将本主题设置为默认主题。 FixIt 主题提供了子菜单的支持，请详见 菜单进阶配置。 ","date":"2021-12-19","objectID":"/first_post/:2:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"2.4 创建你的第一篇文章 以下是创建第一篇文章的方法： hugo new posts/first_post.md 通过添加一些示例内容并替换文件开头的标题，你可以随意编辑文章。 注意 默认情况下，所有文章和页面均作为草稿创建。如果想要渲染这些页面，请从元数据中删除属性 draft: true, 设置属性 draft: false 或者为 hugo 命令添加 -D/--buildDrafts 参数。 ","date":"2021-12-19","objectID":"/first_post/:2:4","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"2.5 在本地启动网站 使用以下命令启动网站： # `hugo serve` 是 `hugo server` 的一个别名，并不是文档拼写错误哦 ~ hugo server 去查看 http://localhost:1313. 基本配置下的预览 技巧 当你运行 hugo server 时，当文件内容更改时，页面会随着更改自动刷新。 注意 由于本主题使用了 Hugo 中的 .Scratch 来实现一些特性， 非常建议你为 hugo server 命令添加 --disableFastRender 参数来实时预览你正在编辑的文章页面。 hugo server --disableFastRender ","date":"2021-12-19","objectID":"/first_post/:2:5","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"2.6 构建网站 当你准备好部署你的网站时，运行以下命令： hugo 会生成一个 public 目录，其中包含你网站的所有静态内容和资源。现在可以将其部署在任何 Web 服务器上。 技巧 网站内容可以通过 Netlify 自动发布和托管（了解有关 通过 Netlify 进行 HUGO 自动化部署 的更多信息）。 或者，您可以使用 AWS Amplify, Github pages, Render 以及更多 … ","date":"2021-12-19","objectID":"/first_post/:2:6","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"3 配置 ","date":"2021-12-19","objectID":"/first_post/:3:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"3.1 网站配置 除了 Hugo 全局配置 和 菜单配置 之外，FixIt 主题还允许您在网站配置中定义以下参数（默认值见 FixIt/config.toml）。 请打开下面的代码块查看完整的 config.toml 示例配置 : [params] # FixIt 主题版本 version = \"0.2.X\" # 例如：\"0.2.X\", \"0.2.15\", \"v0.2.15\" 等 # 网站描述 description = \"这是我的全新 Hugo FixIt 网站\" # 网站关键词 keywords = [\"Hugo\", \"FixIt\"] # 网站默认主题样式 [\"light\", \"dark\", \"auto\"] defaultTheme = \"auto\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # [\"sha256\", \"sha384\", \"sha512\", \"md5\"] fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站图片，用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 开启 PWA 支持 enablePWA = true # 是否自动显示外链图标 externalIcon = false # 默认情况下，FixIt 只会在主页的 HTML 头中注入主题元标记 # 您可以将其关闭，但如果您不这样做，我们将不胜感激，因为这是观察 FixIt 受欢迎程度上升的好方法 disableThemeInject = false # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题，覆盖默认标题 title = \"FixIt\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标，可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10 磁贴颜色 tileColor = \"#da532c\" # Android 浏览器主题色 [params.app.themeColor] light = \"#f8f8f8\" dark = \"#252627\" # 搜索配置 [params.search] enable = true # 搜索引擎的类型 [\"lunr\", \"algolia\"] type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" # 页面头部导航栏配置 [params.header] # 桌面端导航栏模式 [\"sticky\", \"normal\", \"auto\"] desktopMode = \"sticky\" # 移动端导航栏模式 [\"sticky\", \"normal\", \"auto\"] mobileMode = \"auto\" # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"/fixit.min.svg\" # 标题名称 name = \"\" # 你可以在名称（允许 HTML 格式）之前添加其他信息，例如图标 pre = \"\" # 你可以在名称（允许 HTML 格式）之后添加其他信息，例如图标 post = \"\" # 是否为标题显示打字机动画 typeit = false # 页面头部导航栏副标题配置 [params.header.subtitle] # 副标题名称 name = \"\" # 是否为副标题显示打字机动画 typeit = false # 页面底部信息配置 [params.footer] enable = true # 自定义内容（支持 HTML 格式） custom = \"\" # 是否显示 Hugo 和主题信息 hugo = true # 是否显示版权信息 copyright = true # 是否显示作者 author = true # 网站创立年份 since = 2021 # 网站创立时间 siteTime = \"\" # 例：\"2021-12-18T16:15:22+08:00\" # 是否显示网站内容总字数 wordCount = true # 公网安备信息，仅在中国使用（支持 HTML 格式） gov = \"\" # ICP 备案信息，仅在中国使用（支持 HTML 格式） icp = \"\" # 许可协议信息（支持 HTML 格式） license = '\u003ca rel=\"license external nofollow noopener noreferrer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section（所有文章）页面配置 [params.section] # section 页面每页显示文章数量 paginate = 20 # 日期格式（月和日） dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # 最近更新文章设置 [params.section.recentlyUpdated] enable = false rss = false days = 30 maxCount = 10 # List（目录或标签）页面配置 [params.list] # list 页面每页显示文章数量 paginate = 20 # 日期格式（月和日） dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # 主页配置 [params.home] # RSS 文章数目 rss = 10 # 主页个人信息 [params.home.profile] enable = true # Gravatar 邮箱，用于优先在主页显示的头像 gravatarEmail = \"xx@xx.com\" # 主页显示头像的 URL avatarURL = \"\" # 主页显示的网站标题（支持 HTML 格式） title = \"\" # 主页显示的网站副标题 subtitle = \"这是我的全新 Hugo FixIt 网站\" # 是否为副标题显示打字机动画 typeit = true # 是否显示社交账号 social = true # 免责声明（支持 HTML 格式） disclaimer = \"\" # 主页文章列表 [params.home.posts] enable = true # 主页每页显示文章数量 paginate = 6 # 作者的社交信息设置 [params.social] GitHub = \"Lruihao\" Linkedin = \"\" Twitter = \"\" Instagram = \"\" Facebook = \"\" Telegram = \"\" Medium = \"\" Gitlab = \"\" Youtubelegacy = \"\" Youtubecustom = \"\" Youtubechannel = \"\" Tumblr = \"\" Quora = \"\" Keybase = \"\" Pinterest = \"\" Reddit = \"\" Codepen = \"\" FreeCodeCamp = \"\" Bitbucket = \"\" Stackoverflow = \"\" Weibo = \"\" Odnoklassniki = \"\" VK = \"\" Flickr = \"\" Xing = \"\" Snapchat = \"\" Soundcloud = \"\" Spotify = \"\" Bandcamp = \"\" Paypal = \"\" Fivehundredpx = \"\" Mix = \"\" Goodreads = \"\" Lastfm = \"\" Foursquare = \"\" Hackernews = \"\" Kickstarter = \"\" Patreon = \"\" Steam = \"\" Twitch = \"\" Strava = \"\" Skype = \"\" Whatsapp = \"\" Zhihu = \"\" Douban = \"\" Angellist = \"\" Slidershare = \"\" Jsfiddle = \"\" Deviantart = \"\" Behance = \"\" Dribbble = \"\" Wordpress = \"\" Vine = \"\" Googlescholar = \"\" Researchgate = \"\" Mastodon = \"\" Thingiverse = \"\" Devto = \"\" Gitea = \"\" XMPP = \"\" Ma","date":"2021-12-19","objectID":"/first_post/:3:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"3.2 网站图标，浏览器配置，网站清单 强烈建议你把： apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) 放在 /static 目录。利用 https://realfavicongenerator.net/ 可以很容易地生成这些文件。 可以自定义 browserconfig.xml 和 site.webmanifest 文件来设置 theme-color 和 background-color. ","date":"2021-12-19","objectID":"/first_post/:3:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"3.3 自定义样式 注意 Hugo extended 版本对于自定义样式是必需的。 通过定义自定义 .scss 样式文件，FixIt 主题支持可配置的样式。 包含自定义 .scss 样式文件的目录相对于 你的项目根目录 的路径为 assets/css。 在 assets/css/_override.scss 中，你可以覆盖 themes/FixIt/assets/css/_variables.scss 中的变量以自定义样式。 这是一个例子： @import url('https://fonts.googleapis.com/css?family=Fira+Mono:400,700\u0026display=swap\u0026subset=latin-ext'); $code-font-family: Fira Mono, Source Code Pro, Menlo, Consolas, Monaco, monospace; 在 assets/css/_custom.scss 中，你可以添加一些 CSS 样式代码以自定义样式。 3.3.1 页面宽度 FixIt 主题提供了页面宽度配置选项 pageStyle 并提供三种选项。 narrow 保留 \u003cv0.2.13 页面目录宽度比 normal 新的默认页面目录宽度比 wide 较大的页面目录宽度比 另外，你还可以在 assets/css/_custom.scss 中，自定义 pageStyle 值 例如： pageStyle=\"custom\" @media only screen and (min-width: 1441px) { [data-page-style='custom'] { .page { width: 70%; } aside { width: 15%; } } } @media only screen and (max-width: 1440px) { [data-page-style='custom'] { .page { width: 60%; } aside { width: 20%; } } } @media only screen and (max-width: 1200px) { [data-page-style='custom'] { .page { width: 56%; } aside { width: 22%; } } } 3.3.2 打印样式 在 FixIt 主题中，提供有三个打印视图相关的 CSS 类 page-break-before 在元素之前插入分页符 page-break-after 在元素之后插入分页符 print-d-none 在打印视图中隐藏元素 下面是一个简单的例子： \u003cdiv class=\"page-break-before\"\u003e\u003c/div\u003e \u003cdiv class=\"page-break-after\"\u003e\u003c/div\u003e \u003cdiv class=\"print-d-none\"\u003e 您希望在打印视图中隐藏的某些内容写在此处。 \u003c/div\u003e ","date":"2021-12-19","objectID":"/first_post/:3:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"3.4 自定义脚本 包含自定义脚本文件 custom.js 的目录相对于 你的项目根目录 的路径为 assets/js。 如果脚本文件 assets/js/custom.js 存在，它将在每篇文章和页面的末尾执行。 ","date":"2021-12-19","objectID":"/first_post/:3:4","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"3.5 菜单进阶配置 Hugo 有一个简单而强大的 菜单系统。 根据 Hugo 提供的接口，FixIt 主题只实现了部分功能，但我想这足以满足大多数人的需求，也让用户在使用上更加简单。 下面是一个完整的菜单项配置： [menu] [[menu.main]] identifier = \"posts\" # 父级菜单项的标识符 (identifier) parent = \"\" # 你可以在名称（允许 HTML 格式）之前添加其他信息，例如图标 pre = \"\" # 你可以在名称（允许 HTML 格式）之后添加其他信息，例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时，将显示的标题 title = \"\" weight = 1 # 向菜单项添加用户定义的内容 [menu.main.params] # 添加 CSS 类到菜单项 class = \"text-center\" # 是否为草稿菜单，类似草稿页面 draft = false # 添加 fontawesome 图标到菜单项 icon = \"fa-solid fa-archive\" # 设置菜单项类型，可选值：[\"mobile\", \"desktop\"] type = \"\" 3.5.1 子菜单 考虑到实用性和排版问题，FixIt 主题只支持两层嵌套的菜单，通过在菜单配置中的 parent 字段即可。 一个菜单项的父项应该是另一个菜单项的标识符 (identifier)，在菜单中标识符应该是唯一的。 3.5.2 菜单参数 您还可以通过 params 字段将自定义的内容添加到菜单项。 FixIt 主题目前提供了两个参数的配置： class {String} 添加 CSS 类到菜单项 draft {Boolean} 是否为草稿菜单，类似草稿页面 icon {String} 添加 fontawesome 图标到菜单项 type {String} 设置菜单项类型，可选值：[“mobile”, “desktop”] 注意 hugo server 命令启动或者为 hugo 添加 -D/--buildDrafts 参数，都能渲染草稿菜单和页面。 技巧 这样做有利于在部署时很好地区分预览环境和生产环境不同的内容。 例如： 有草稿菜单的预览环境 没有草稿菜单的生产环境 3.5.3 添加内容到菜单 也可以通过配置 front matter 从页面创建菜单项（即 .md 文件）。 这是一个 yaml 示例： --- title: \"主题文档 - 基本概念\" author: \"Lruihao\" menu: main: title: \"探索 Hugo - FixIt 主题的全部内容和背后的核心概念。\" parent: \"documentation\" params: icon: \"fa-brands fa-readme\" --- ... ","date":"2021-12-19","objectID":"/first_post/:3:5","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"4 多语言和 i18n FixIt 主题完全兼容 Hugo 的多语言模式，并且支持在网页上切换语言。 语言切换 ","date":"2021-12-19","objectID":"/first_post/:4:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"4.1 兼容性 语言 Hugo 代码 HTML lang 属性 主题文档 Lunr.js 支持 英语 en en 简体中文 zh-cn zh-CN 繁体中文 zh-tw zh-TW 法语 fr fr 波兰语 pl pl 巴西葡萄牙语 pt-br pt-BR 意大利语 it it 西班牙语 es es 德语 de de 塞尔维亚语 sr sr 俄语 ru ru 罗马尼亚语 ro ro 越南语 vi vi ","date":"2021-12-19","objectID":"/first_post/:4:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"4.2 基本配置 学习了 Hugo 如何处理多语言网站 之后，请在 站点配置 中定义你的网站语言。 例如，一个支持英语，中文和法语的网站配置： # [en, zh-cn, fr, pl, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" [languages] [languages.en] weight = 1 title = \"My New Hugo FixIt Site\" languageCode = \"en\" languageName = \"English\" [[languages.en.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" weight = 1 [[languages.en.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" weight = 2 [[languages.en.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" weight = 3 [languages.zh-cn] weight = 2 title = \"我的全新 Hugo FixIt 网站\" # 网站语言，仅在这里 CN 大写 languageCode = \"zh-CN\" languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true [[languages.zh-cn.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"文章\" url = \"/posts/\" title = \"\" weight = 1 [[languages.zh-cn.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[languages.zh-cn.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 [languages.fr] weight = 3 title = \"Mon nouveau site Hugo FixIt\" languageCode = \"fr\" languageName = \"Français\" [[languages.fr.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Postes\" url = \"/posts/\" title = \"\" weight = 1 [[languages.fr.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Balises\" url = \"/tags/\" title = \"\" weight = 2 [[languages.fr.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Catégories\" url = \"/categories/\" title = \"\" weight = 3 然后，对于每个新页面，将语言代码附加到文件名中。 单个文件 my-page.md 需要分为三个文件： 英语：my-page.en.md 中文：my-page.zh-cn.md 法语：my-page.fr.md 注意 请注意，菜单中仅显示翻译的页面。它不会替换为默认语言内容。 技巧 也可以使用 文章前置参数 来翻译网址。 ","date":"2021-12-19","objectID":"/first_post/:4:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"4.3 修改默认的翻译字符串 翻译字符串用于在主题中使用的常见默认值。 目前提供 一些语言 的翻译，但你可能自定义其他语言或覆盖默认值。 要覆盖默认值，请在你项目的 i18n 目录 i18n/\u003clanguageCode\u003e.toml 中创建一个新文件，并从 themes/FixIt/i18n/en.toml 中获得提示。 另外，由于你的翻译可能会帮助到其他人，请花点时间通过 创建一个 PR 来贡献主题翻译，谢谢！ ","date":"2021-12-19","objectID":"/first_post/:4:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"5 搜索 基于 Lunr.js 或 algolia, FixIt 主题支持搜索功能。 ","date":"2021-12-19","objectID":"/first_post/:5:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"5.1 输出配置 为了生成搜索功能所需要的 index.json, 请在你的 网站配置 中添加 JSON 输出文件类型到 outputs 部分的 home 字段中。 [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"2021-12-19","objectID":"/first_post/:5:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["documentation"],"content":"5.2 搜索配置 基于 Hugo 生成的 index.json 文件，你可以激活搜索功能。 这是你的 网站配置 中的搜索部分： [params.search] enable = true # 搜索引擎的类型 [\"lunr\", \"algolia\"] type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" 怎样选择搜索引擎？ 以下是两种搜索引擎的对比： lunr: 简单，无需同步 index.json, 没有 contentLength 的限制，但占用带宽大且性能低（特别是中文需要一个较大的分词依赖库） algolia: 高性能并且占用带宽低，但需要同步 index.json 且有 contentLength 的限制 文章内容被 h2 和 h3 HTML 标签切分来提高查询效果并且基本实现全文搜索。 contentLength 用来限制 h2 和 h3 HTML 标签开头的内容部分的最大长度。 关于 algolia 的使用技巧 你需要上传 index.json 到 algolia 来激活搜索功能。你可以使用浏览器来上传 index.json 文件但是一个自动化的脚本可能效果更好。 Algolia Atomic 是一个不错的选择。 为了兼容 Hugo 的多语言模式，你需要上传不同语言的 index.json 文件到对应的 algolia index, 例如 zh-cn/index.json 或 fr/index.json… 感谢 本文档中 v0.2.10 版本之前的内容，感谢原作者 Dillon 编写修订。 ","date":"2021-12-19","objectID":"/first_post/:5:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/first_post/"},{"categories":["draft"],"content":"在将已有项目提交到线上远程仓库时，报错[rejected] master -\u003e master (fetch first) error: failed to push some refs 本文将介绍如何将已有项目提交到线上远程仓库以及中间遇到的问题 ## 一、提交过程（会了的小伙伴直接跳到第二步）： 在github上创建了一个仓库，并复制了仓库http地址 在我已有项目目录下，初始化一个本地仓库，即终端输入git init 将我的项目和github（gitee也一样）上的仓库建立个联系，即终端输入git remote add origin 仓库http地址 然后将所有项目文件添加到缓存区，即终端输入git add . 将缓存区文件提交到本地仓库，即终端输入git commit -m “提交我的项目文件” 将本地仓库提交到已经相关联好的github线上仓库，即终端输入git push -u origin master ， 这时就会报错： 二、报错解决办法 报错的原因是因为，每个仓库都有一个分支，也可以理解为大仓库里的小仓库，我们只是跟线上远程仓库有了关联，但没有跟线上远程仓库的某个分支关联，所以我们没法提交 在终端输入 git pull –rebase origin master 即可跟刚创建的线上远程仓库的默认分支master关联 这时再执行一下 git push -u origin master 即可将我们的项目文件上传到关联的线上远程文件中 大功告成啦！ ","date":"2022-11-04","objectID":"/gitrejected/:1:0","tags":["draft"],"title":"Gitrejected","uri":"/gitrejected/"},{"categories":["draft"],"content":"sadadff# # sssad 阿萨德是sad但是阿三 ## ## ","date":"2022-11-04","objectID":"/likis/:0:0","tags":["draft"],"title":"Likis","uri":"/likis/"},{"categories":["draft"],"content":" Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 去露营啦！:tent: 很快就回来。 真开心！:joy: ","date":"2022-11-02","objectID":"/bar/:0:0","tags":["draft"],"title":"Index","uri":"/bar/"},{"categories":["Git"],"content":"A commit message is a short description of a change to a repository. We should follow certain standards to describe changes efficiently, such as: ","date":"2022-08-12","objectID":"/first_pos1t/:0:0","tags":["Git"],"title":"Commit Message standard","uri":"/first_pos1t/"},{"categories":["Git"],"content":"Format [{emoji} ]{type}[({module})]: {subject within 50 words}[ (#{issue/pull request})] example: :tada: Feat: add shortcode fixit-encryptor shortcode (#123) :arrow_up: Chore(libs): update Artalk from 2.2.12 to 2.3.4 (#150) ","date":"2022-08-12","objectID":"/first_pos1t/:1:0","tags":["Git"],"title":"Commit Message standard","uri":"/first_pos1t/"},{"categories":["Git"],"content":"Emoji https://gitmoji.dev vscode plugin utools plugin GitEmoji ","date":"2022-08-12","objectID":"/first_pos1t/:2:0","tags":["Git"],"title":"Commit Message standard","uri":"/first_pos1t/"},{"categories":["Git"],"content":"Message Emoji Type Example Description (No Ambiguous) :tada: :sparkles: Feat Feat: add {feature} new feature :truck: Feat: adjust/migrate {feature name}, {change details} For the adjustment feature, it is necessary to describe the current situation (before) and after adjustment (after) :fire: Feat: delete {feature name}, {deletion reason} If the feature is deleted, the reason for deletion must be explained :bug: :construction: :rotating_light: Fix Fix: fix {bug description} Fix known bugs :art: :lipstick: :pencil2: Style Style: Typesetting/CSS style {optimizing content} Changes that do not affect code operation, such as code layout and style change :recycle: Refactor Refactor: override {feature name} It is neither a new function nor a code change to fix a bug. Simply rewriting the code of a function does not affect the function result :zap: Perf Perf: improve performance {function name}, {improve content} Optimize code performance :rewind: Revert Revert: restore version {commit message of restore version} Restore the version of one commit :pencil: :pencil2: Docs Docs: revise comments/update documents Adjustment of documents and notes :wrench: Chore Chore: update plugin version Changes in the construction process or auxiliary tools ","date":"2022-08-12","objectID":"/first_pos1t/:3:0","tags":["Git"],"title":"Commit Message standard","uri":"/first_pos1t/"}]